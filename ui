<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Cloth Simulation UI Test</title>
  <style>
    body, html {
      margin: 0;
      padding: 0;
      height: 100%;
      overflow: hidden;
    }
    
    .container {
      position: relative;
      width: 100%;
      height: 100vh;
    }
    
    #glCanvas, #textCanvas {
      position: absolute;
      top: 0;
      left: 0;
      width: calc(100% - 320px);
      height: 100%;
      background-color: #333;
    }
    
    #textCanvas {
      pointer-events: none;
    }
    
    /* Control Panel Styles */
    .control-panel {
      position: absolute;
      top: 0;
      right: 0;
      width: 320px;
      height: 100%;
      background-color: #2a5964; /* Turquoise/cyan color to match the screenshot */
      color: #fff;
      padding: 15px;
      box-sizing: border-box;
      overflow-y: auto;
      font-family: Arial, sans-serif;
      z-index: 10;
    }
    
    .control-panel h3 {
      margin-top: 0;
      margin-bottom: 20px;
      text-align: center;
      border-bottom: 1px solid #4a7983;
      padding-bottom: 10px;
      color: white;
    }
    
    .control-group {
      margin-bottom: 20px;
      background-color: rgba(255, 255, 255, 0.1);
      padding: 12px;
      border-radius: 6px;
    }
    
    .control-group label {
      display: block;
      margin-bottom: 8px;
      color: white;
      font-weight: bold;
    }
    
    .control-panel select,
    .control-panel button {
      width: 100%;
      padding: 10px;
      margin-bottom: 8px;
      background-color: #1d3f47;
      color: #fff;
      border: 1px solid #4a7983;
      border-radius: 4px;
      cursor: pointer;
    }
    
    .control-panel button {
      background-color: #3a6772;
      font-weight: bold;
      transition: background-color 0.3s;
    }
    
    .control-panel button:hover {
      background-color: #4a7983;
    }
    
    .slider-container {
      margin-top: 10px;
    }
    
    .slider-container label {
      display: block;
      margin-bottom: 5px;
      font-weight: normal;
    }
    
    .slider-container input[type="range"] {
      width: 85%;
      vertical-align: middle;
      background-color: #1d3f47;
    }
    
    .slider-container span {
      display: inline-block;
      width: 40px;
      text-align: right;
      margin-left: 8px;
    }
    
    .checkbox-label {
      display: flex !important;
      align-items: center;
      font-weight: normal !important;
    }
    
    .checkbox-label input[type="checkbox"] {
      margin-right: 8px;
      width: 18px;
      height: 18px;
    }
    
    .info-panel {
      margin-top: 30px;
      padding: 15px;
      background-color: rgba(0, 0, 0, 0.2);
      border-radius: 6px;
    }
    
    .info-panel h4 {
      margin-top: 0;
      margin-bottom: 10px;
      color: white;
    }
    
    .info-panel ul {
      margin: 0;
      padding-left: 20px;
    }
    
    .info-panel li {
      margin-bottom: 8px;
      font-size: 0.9em;
    }
    
    /* Status bar style */
    .status-bar {
      position: absolute;
      bottom: 0;
      left: 0;
      width: calc(100% - 320px);
      height: 40px;
      background-color: #222;
      color: white;
      display: flex;
      align-items: center;
      padding-left: 20px;
      font-family: Arial, sans-serif;
    }
  </style>
</head>
<body>
  <div class="container">
    <!-- Simulation canvas placeholders -->
    <canvas id="glCanvas" width="800" height="800"></canvas>
    <canvas id="textCanvas" width="800" height="800"></canvas>
    
    <!-- Status bar -->
    <div class="status-bar">
      Mode: Simulation | Time: 26.17 | Energy: -154377.85
    </div>
    
    <!-- Control Panel -->
    <div id="controlPanel" class="control-panel">
      <h3>Cloth Simulation Controls</h3>
      
      <div class="control-group">
        <label for="simulation-select">Simulation Type:</label>
        <select id="simulation-select">
          <option value="0">Cotton Basic</option>
          <option value="1">Silk Drape</option>
          <option value="2">Leather Stiff</option>
          <option value="3">Rubber Stretch</option>
          <option value="4">Wind Test</option>
          <option value="5">Centerpiece</option>
        </select>
      </div>
      
      <div class="control-group">
        <label for="render-mode">Render Mode:</label>
        <select id="render-mode">
          <option value="0">Shaded</option>
          <option value="1">Wireframe</option>
          <option value="2">Points</option>
          <option value="3">Springs</option>
          <option value="4">Debug</option>
        </select>
      </div>
      
      <div class="control-group">
        <label class="checkbox-label">
          <input type="checkbox" id="toggle-wind">
          Enable Wind
        </label>
        <div class="slider-container">
          <label for="wind-strength">Wind Strength:</label>
          <input type="range" id="wind-strength" min="0" max="20" value="5" step="0.5">
          <span id="wind-strength-value">5.0</span>
        </div>
      </div>
      
      <div class="control-group">
        <label class="checkbox-label">
          <input type="checkbox" id="toggle-sphere" checked>
          Show Sphere
        </label>
      </div>
      
      <div class="control-group">
        <button id="reset-simulation">Reset Simulation</button>
        <button id="cut-cloth">Cut Cloth</button>
      </div>
      
      <div class="control-group">
        <label for="gravity-strength">Gravity Strength:</label>
        <div class="slider-container">
          <input type="range" id="gravity-strength" min="0" max="20" value="9.8" step="0.1">
          <span id="gravity-strength-value">9.8</span>
        </div>
      </div>
      
      <div class="info-panel">
        <h4>Controls:</h4>
        <ul>
          <li>Left-click + drag: Rotate camera</li>
          <li>Right-click + drag: Zoom camera</li>
          <li>Arrow keys: Pan camera</li>
          <li>Left-click on particle: Drag particle</li>
          <li>Shift + click: Pin/unpin particle</li>
        </ul>
      </div>
    </div>
  </div>

  <script>
    // Mock cloth animation object for testing
    window.clothAnimation = {
      sphereVisible: true,
      runClothTest: function(index) {
        console.log('Running cloth test:', index);
        alert('Selected simulation: ' + document.getElementById('simulation-select').options[index].text);
      },
      setRenderMode: function(mode) {
        console.log('Setting render mode:', mode);
        alert('Set render mode: ' + document.getElementById('render-mode').options[mode].text);
      },
      toggleWind: function(enabled, strength) {
        console.log('Toggle wind:', enabled, strength);
        document.getElementById('wind-strength-value').textContent = strength.toFixed(1);
      },
      reset: function() {
        console.log('Reset simulation');
        alert('Simulation reset');
      },
      cutCloth: function() {
        console.log('Cut cloth');
        alert('Cloth cut');
      },
      getCloth: function() {
        return {
          gravity: { x: 0, y: -9.8, z: 0 }
        };
      },
      getGUI: function() {
        return {
          hoverX: 0,
          hoverY: 0
        };
      },
      getScene: function() {
        return {
          Vec3: function(coords) {
            return { x: coords[0], y: coords[1], z: coords[2] };
          }
        };
      }
    };

    // Add interactivity to the UI
    document.addEventListener('DOMContentLoaded', function() {
      // Update wind strength value display
      const windSlider = document.getElementById('wind-strength');
      const windValue = document.getElementById('wind-strength-value');
      windSlider.addEventListener('input', function() {
        windValue.textContent = parseFloat(windSlider.value).toFixed(1);
      });

      // Update gravity strength value display
      const gravitySlider = document.getElementById('gravity-strength');
      const gravityValue = document.getElementById('gravity-strength-value');
      gravitySlider.addEventListener('input', function() {
        gravityValue.textContent = parseFloat(gravitySlider.value).toFixed(1);
      });

      // Simulation type dropdown
      document.getElementById('simulation-select').addEventListener('change', function(e) {
        window.clothAnimation.runClothTest(parseInt(e.target.value));
      });

      // Render mode dropdown
      document.getElementById('render-mode').addEventListener('change', function(e) {
        window.clothAnimation.setRenderMode(parseInt(e.target.value));
      });

      // Wind toggle
      document.getElementById('toggle-wind').addEventListener('change', function(e) {
        window.clothAnimation.toggleWind(
          e.target.checked,
          parseFloat(document.getElementById('wind-strength').value)
        );
      });

      // Sphere toggle
      document.getElementById('toggle-sphere').addEventListener('change', function(e) {
        window.clothAnimation.sphereVisible = e.target.checked;
        console.log('Sphere visible:', e.target.checked);
      });

      // Reset button
      document.getElementById('reset-simulation').addEventListener('click', function() {
        window.clothAnimation.reset();
      });

      // Cut cloth button
      document.getElementById('cut-cloth').addEventListener('click', function() {
        window.clothAnimation.cutCloth();
      });

      // Mock rendering of a checkboard and sphere
      /*const ctx = document.getElementById('glCanvas').getContext('2d');
      if (ctx) {
        // Draw checkerboard
        const tileSize = 100;
        for (let i = 0; i < 8; i++) {
          for (let j = 0; j < 8; j++) {
            ctx.fillStyle = (i + j) % 2 === 0 ? '#aaa' : '#222';
            ctx.fillRect(i * tileSize, j * tileSize, tileSize, tileSize);
          }
        }
        
        // Draw sphere
        ctx.fillStyle = '#223445';
        ctx.beginPath();
        ctx.ellipse(400, 300, 150, 300, 0, 0, Math.PI * 2);
        ctx.fill();
      }*/
    });
  </script>
</body>
</html>
